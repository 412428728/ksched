// Code generated by protoc-gen-gogo.
// source: resource_desc.proto
// DO NOT EDIT!

package firmament

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResourceDescriptor_ResourceState int32

const (
	ResourceDescriptor_ResourceUnknown ResourceDescriptor_ResourceState = 0
	ResourceDescriptor_ResourceIdle    ResourceDescriptor_ResourceState = 1
	ResourceDescriptor_ResourceBusy    ResourceDescriptor_ResourceState = 2
	ResourceDescriptor_ResourceLost    ResourceDescriptor_ResourceState = 3
)

var ResourceDescriptor_ResourceState_name = map[int32]string{
	0: "ResourceUnknown",
	1: "ResourceIdle",
	2: "ResourceBusy",
	3: "ResourceLost",
}
var ResourceDescriptor_ResourceState_value = map[string]int32{
	"ResourceUnknown": 0,
	"ResourceIdle":    1,
	"ResourceBusy":    2,
	"ResourceLost":    3,
}

func (x ResourceDescriptor_ResourceState) String() string {
	return proto.EnumName(ResourceDescriptor_ResourceState_name, int32(x))
}
func (ResourceDescriptor_ResourceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorResourceDesc, []int{0, 0}
}

type ResourceDescriptor_ResourceType int32

const (
	ResourceDescriptor_ResourcePu          ResourceDescriptor_ResourceType = 0
	ResourceDescriptor_ResourceCore        ResourceDescriptor_ResourceType = 1
	ResourceDescriptor_ResourceCache       ResourceDescriptor_ResourceType = 2
	ResourceDescriptor_ResourceNic         ResourceDescriptor_ResourceType = 3
	ResourceDescriptor_ResourceDisk        ResourceDescriptor_ResourceType = 4
	ResourceDescriptor_ResourceSsd         ResourceDescriptor_ResourceType = 5
	ResourceDescriptor_ResourceMachine     ResourceDescriptor_ResourceType = 6
	ResourceDescriptor_ResourceLogical     ResourceDescriptor_ResourceType = 7
	ResourceDescriptor_ResourceNumaNode    ResourceDescriptor_ResourceType = 8
	ResourceDescriptor_ResourceSocket      ResourceDescriptor_ResourceType = 9
	ResourceDescriptor_ResourceCoordinator ResourceDescriptor_ResourceType = 10
)

var ResourceDescriptor_ResourceType_name = map[int32]string{
	0:  "ResourcePu",
	1:  "ResourceCore",
	2:  "ResourceCache",
	3:  "ResourceNic",
	4:  "ResourceDisk",
	5:  "ResourceSsd",
	6:  "ResourceMachine",
	7:  "ResourceLogical",
	8:  "ResourceNumaNode",
	9:  "ResourceSocket",
	10: "ResourceCoordinator",
}
var ResourceDescriptor_ResourceType_value = map[string]int32{
	"ResourcePu":          0,
	"ResourceCore":        1,
	"ResourceCache":       2,
	"ResourceNic":         3,
	"ResourceDisk":        4,
	"ResourceSsd":         5,
	"ResourceMachine":     6,
	"ResourceLogical":     7,
	"ResourceNumaNode":    8,
	"ResourceSocket":      9,
	"ResourceCoordinator": 10,
}

func (x ResourceDescriptor_ResourceType) String() string {
	return proto.EnumName(ResourceDescriptor_ResourceType_name, int32(x))
}
func (ResourceDescriptor_ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorResourceDesc, []int{0, 1}
}

type ResourceDescriptor struct {
	Uuid                string                           `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	FriendlyName        string                           `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	DescriptiveName     string                           `protobuf:"bytes,3,opt,name=descriptive_name,json=descriptiveName,proto3" json:"descriptive_name,omitempty"`
	State               ResourceDescriptor_ResourceState `protobuf:"varint,4,opt,name=state,proto3,enum=firmament.ResourceDescriptor_ResourceState" json:"state,omitempty"`
	TaskCapacity        uint64                           `protobuf:"varint,5,opt,name=task_capacity,json=taskCapacity,proto3" json:"task_capacity,omitempty"`
	LastHeartbeat       uint64                           `protobuf:"varint,6,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
	Type                ResourceDescriptor_ResourceType  `protobuf:"varint,7,opt,name=type,proto3,enum=firmament.ResourceDescriptor_ResourceType" json:"type,omitempty"`
	Schedulable         bool                             `protobuf:"varint,8,opt,name=schedulable,proto3" json:"schedulable,omitempty"`
	CurrentRunningTasks []uint64                         `protobuf:"varint,9,rep,name=current_running_tasks,json=currentRunningTasks" json:"current_running_tasks,omitempty"`
	// Stores the number of running tasks on the resources that
	// are below this node,
	NumRunningTasksBelow uint64 `protobuf:"varint,10,opt,name=num_running_tasks_below,json=numRunningTasksBelow,proto3" json:"num_running_tasks_below,omitempty"`
	NumSlotsBelow        uint64 `protobuf:"varint,11,opt,name=num_slots_below,json=numSlotsBelow,proto3" json:"num_slots_below,omitempty"`
	// Resource capacity and load tracking
	AvailableResources          *ResourceVector `protobuf:"bytes,12,opt,name=available_resources,json=availableResources" json:"available_resources,omitempty"`
	ReservedResources           *ResourceVector `protobuf:"bytes,13,opt,name=reserved_resources,json=reservedResources" json:"reserved_resources,omitempty"`
	MinAvailableResourcesBelow  *ResourceVector `protobuf:"bytes,14,opt,name=min_available_resources_below,json=minAvailableResourcesBelow" json:"min_available_resources_below,omitempty"`
	MaxAvailableResourcesBelow  *ResourceVector `protobuf:"bytes,15,opt,name=max_available_resources_below,json=maxAvailableResourcesBelow" json:"max_available_resources_below,omitempty"`
	MinUnreservedResourcesBelow *ResourceVector `protobuf:"bytes,16,opt,name=min_unreserved_resources_below,json=minUnreservedResourcesBelow" json:"min_unreserved_resources_below,omitempty"`
	MaxUnreservedResourcesBelow *ResourceVector `protobuf:"bytes,17,opt,name=max_unreserved_resources_below,json=maxUnreservedResourcesBelow" json:"max_unreserved_resources_below,omitempty"`
	ResourceCapacity            *ResourceVector `protobuf:"bytes,18,opt,name=resource_capacity,json=resourceCapacity" json:"resource_capacity,omitempty"`
	// Cost-model-specific statistics
	WhareMapStats          *WhareMapStats          `protobuf:"bytes,19,opt,name=whare_map_stats,json=whareMapStats" json:"whare_map_stats,omitempty"`
	CocoInterferenceScores *CoCoInterferenceScores `protobuf:"bytes,20,opt,name=coco_interference_scores,json=cocoInterferenceScores" json:"coco_interference_scores,omitempty"`
	// Simulation related fields
	TraceMachineId uint64 `protobuf:"varint,21,opt,name=trace_machine_id,json=traceMachineId,proto3" json:"trace_machine_id,omitempty"`
}

func (m *ResourceDescriptor) Reset()                    { *m = ResourceDescriptor{} }
func (m *ResourceDescriptor) String() string            { return proto.CompactTextString(m) }
func (*ResourceDescriptor) ProtoMessage()               {}
func (*ResourceDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorResourceDesc, []int{0} }

func (m *ResourceDescriptor) GetAvailableResources() *ResourceVector {
	if m != nil {
		return m.AvailableResources
	}
	return nil
}

func (m *ResourceDescriptor) GetReservedResources() *ResourceVector {
	if m != nil {
		return m.ReservedResources
	}
	return nil
}

func (m *ResourceDescriptor) GetMinAvailableResourcesBelow() *ResourceVector {
	if m != nil {
		return m.MinAvailableResourcesBelow
	}
	return nil
}

func (m *ResourceDescriptor) GetMaxAvailableResourcesBelow() *ResourceVector {
	if m != nil {
		return m.MaxAvailableResourcesBelow
	}
	return nil
}

func (m *ResourceDescriptor) GetMinUnreservedResourcesBelow() *ResourceVector {
	if m != nil {
		return m.MinUnreservedResourcesBelow
	}
	return nil
}

func (m *ResourceDescriptor) GetMaxUnreservedResourcesBelow() *ResourceVector {
	if m != nil {
		return m.MaxUnreservedResourcesBelow
	}
	return nil
}

func (m *ResourceDescriptor) GetResourceCapacity() *ResourceVector {
	if m != nil {
		return m.ResourceCapacity
	}
	return nil
}

func (m *ResourceDescriptor) GetWhareMapStats() *WhareMapStats {
	if m != nil {
		return m.WhareMapStats
	}
	return nil
}

func (m *ResourceDescriptor) GetCocoInterferenceScores() *CoCoInterferenceScores {
	if m != nil {
		return m.CocoInterferenceScores
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceDescriptor)(nil), "firmament.ResourceDescriptor")
	proto.RegisterEnum("firmament.ResourceDescriptor_ResourceState", ResourceDescriptor_ResourceState_name, ResourceDescriptor_ResourceState_value)
	proto.RegisterEnum("firmament.ResourceDescriptor_ResourceType", ResourceDescriptor_ResourceType_name, ResourceDescriptor_ResourceType_value)
}
func (m *ResourceDescriptor) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResourceDescriptor) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintResourceDesc(data, i, uint64(len(m.Uuid)))
		i += copy(data[i:], m.Uuid)
	}
	if len(m.FriendlyName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintResourceDesc(data, i, uint64(len(m.FriendlyName)))
		i += copy(data[i:], m.FriendlyName)
	}
	if len(m.DescriptiveName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintResourceDesc(data, i, uint64(len(m.DescriptiveName)))
		i += copy(data[i:], m.DescriptiveName)
	}
	if m.State != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.State))
	}
	if m.TaskCapacity != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.TaskCapacity))
	}
	if m.LastHeartbeat != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.LastHeartbeat))
	}
	if m.Type != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.Type))
	}
	if m.Schedulable {
		data[i] = 0x40
		i++
		if m.Schedulable {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.CurrentRunningTasks) > 0 {
		for _, num := range m.CurrentRunningTasks {
			data[i] = 0x48
			i++
			i = encodeVarintResourceDesc(data, i, uint64(num))
		}
	}
	if m.NumRunningTasksBelow != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.NumRunningTasksBelow))
	}
	if m.NumSlotsBelow != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.NumSlotsBelow))
	}
	if m.AvailableResources != nil {
		data[i] = 0x62
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.AvailableResources.Size()))
		n1, err := m.AvailableResources.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ReservedResources != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.ReservedResources.Size()))
		n2, err := m.ReservedResources.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.MinAvailableResourcesBelow != nil {
		data[i] = 0x72
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.MinAvailableResourcesBelow.Size()))
		n3, err := m.MinAvailableResourcesBelow.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.MaxAvailableResourcesBelow != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.MaxAvailableResourcesBelow.Size()))
		n4, err := m.MaxAvailableResourcesBelow.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.MinUnreservedResourcesBelow != nil {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.MinUnreservedResourcesBelow.Size()))
		n5, err := m.MinUnreservedResourcesBelow.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.MaxUnreservedResourcesBelow != nil {
		data[i] = 0x8a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.MaxUnreservedResourcesBelow.Size()))
		n6, err := m.MaxUnreservedResourcesBelow.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ResourceCapacity != nil {
		data[i] = 0x92
		i++
		data[i] = 0x1
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.ResourceCapacity.Size()))
		n7, err := m.ResourceCapacity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.WhareMapStats != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.WhareMapStats.Size()))
		n8, err := m.WhareMapStats.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.CocoInterferenceScores != nil {
		data[i] = 0xa2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.CocoInterferenceScores.Size()))
		n9, err := m.CocoInterferenceScores.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.TraceMachineId != 0 {
		data[i] = 0xa8
		i++
		data[i] = 0x1
		i++
		i = encodeVarintResourceDesc(data, i, uint64(m.TraceMachineId))
	}
	return i, nil
}

func encodeFixed64ResourceDesc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ResourceDesc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintResourceDesc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ResourceDescriptor) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovResourceDesc(uint64(l))
	}
	l = len(m.FriendlyName)
	if l > 0 {
		n += 1 + l + sovResourceDesc(uint64(l))
	}
	l = len(m.DescriptiveName)
	if l > 0 {
		n += 1 + l + sovResourceDesc(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovResourceDesc(uint64(m.State))
	}
	if m.TaskCapacity != 0 {
		n += 1 + sovResourceDesc(uint64(m.TaskCapacity))
	}
	if m.LastHeartbeat != 0 {
		n += 1 + sovResourceDesc(uint64(m.LastHeartbeat))
	}
	if m.Type != 0 {
		n += 1 + sovResourceDesc(uint64(m.Type))
	}
	if m.Schedulable {
		n += 2
	}
	if len(m.CurrentRunningTasks) > 0 {
		for _, e := range m.CurrentRunningTasks {
			n += 1 + sovResourceDesc(uint64(e))
		}
	}
	if m.NumRunningTasksBelow != 0 {
		n += 1 + sovResourceDesc(uint64(m.NumRunningTasksBelow))
	}
	if m.NumSlotsBelow != 0 {
		n += 1 + sovResourceDesc(uint64(m.NumSlotsBelow))
	}
	if m.AvailableResources != nil {
		l = m.AvailableResources.Size()
		n += 1 + l + sovResourceDesc(uint64(l))
	}
	if m.ReservedResources != nil {
		l = m.ReservedResources.Size()
		n += 1 + l + sovResourceDesc(uint64(l))
	}
	if m.MinAvailableResourcesBelow != nil {
		l = m.MinAvailableResourcesBelow.Size()
		n += 1 + l + sovResourceDesc(uint64(l))
	}
	if m.MaxAvailableResourcesBelow != nil {
		l = m.MaxAvailableResourcesBelow.Size()
		n += 1 + l + sovResourceDesc(uint64(l))
	}
	if m.MinUnreservedResourcesBelow != nil {
		l = m.MinUnreservedResourcesBelow.Size()
		n += 2 + l + sovResourceDesc(uint64(l))
	}
	if m.MaxUnreservedResourcesBelow != nil {
		l = m.MaxUnreservedResourcesBelow.Size()
		n += 2 + l + sovResourceDesc(uint64(l))
	}
	if m.ResourceCapacity != nil {
		l = m.ResourceCapacity.Size()
		n += 2 + l + sovResourceDesc(uint64(l))
	}
	if m.WhareMapStats != nil {
		l = m.WhareMapStats.Size()
		n += 2 + l + sovResourceDesc(uint64(l))
	}
	if m.CocoInterferenceScores != nil {
		l = m.CocoInterferenceScores.Size()
		n += 2 + l + sovResourceDesc(uint64(l))
	}
	if m.TraceMachineId != 0 {
		n += 2 + sovResourceDesc(uint64(m.TraceMachineId))
	}
	return n
}

func sovResourceDesc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozResourceDesc(x uint64) (n int) {
	return sovResourceDesc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceDescriptor) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceDesc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendlyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendlyName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptiveName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptiveName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.State |= (ResourceDescriptor_ResourceState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskCapacity", wireType)
			}
			m.TaskCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TaskCapacity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeat", wireType)
			}
			m.LastHeartbeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastHeartbeat |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (ResourceDescriptor_ResourceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedulable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Schedulable = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRunningTasks", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentRunningTasks = append(m.CurrentRunningTasks, v)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRunningTasksBelow", wireType)
			}
			m.NumRunningTasksBelow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumRunningTasksBelow |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSlotsBelow", wireType)
			}
			m.NumSlotsBelow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumSlotsBelow |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvailableResources == nil {
				m.AvailableResources = &ResourceVector{}
			}
			if err := m.AvailableResources.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReservedResources == nil {
				m.ReservedResources = &ResourceVector{}
			}
			if err := m.ReservedResources.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAvailableResourcesBelow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinAvailableResourcesBelow == nil {
				m.MinAvailableResourcesBelow = &ResourceVector{}
			}
			if err := m.MinAvailableResourcesBelow.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAvailableResourcesBelow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxAvailableResourcesBelow == nil {
				m.MaxAvailableResourcesBelow = &ResourceVector{}
			}
			if err := m.MaxAvailableResourcesBelow.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUnreservedResourcesBelow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinUnreservedResourcesBelow == nil {
				m.MinUnreservedResourcesBelow = &ResourceVector{}
			}
			if err := m.MinUnreservedResourcesBelow.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnreservedResourcesBelow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxUnreservedResourcesBelow == nil {
				m.MaxUnreservedResourcesBelow = &ResourceVector{}
			}
			if err := m.MaxUnreservedResourcesBelow.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceCapacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceCapacity == nil {
				m.ResourceCapacity = &ResourceVector{}
			}
			if err := m.ResourceCapacity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhareMapStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WhareMapStats == nil {
				m.WhareMapStats = &WhareMapStats{}
			}
			if err := m.WhareMapStats.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CocoInterferenceScores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CocoInterferenceScores == nil {
				m.CocoInterferenceScores = &CoCoInterferenceScores{}
			}
			if err := m.CocoInterferenceScores.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceMachineId", wireType)
			}
			m.TraceMachineId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TraceMachineId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourceDesc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResourceDesc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourceDesc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourceDesc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthResourceDesc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowResourceDesc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipResourceDesc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthResourceDesc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourceDesc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorResourceDesc = []byte{
	// 776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x95, 0xdd, 0x6e, 0x23, 0x35,
	0x1c, 0xc5, 0x37, 0x9b, 0xb4, 0xdb, 0x38, 0x5f, 0x8e, 0xd3, 0xb2, 0x43, 0x11, 0x51, 0x29, 0x02,
	0x2d, 0x20, 0xb2, 0x52, 0x11, 0xb7, 0x88, 0x6d, 0x2a, 0xd4, 0xa2, 0xb6, 0x42, 0x93, 0x16, 0x24,
	0x40, 0x8c, 0x1c, 0x8f, 0x93, 0x58, 0x99, 0xd8, 0x91, 0xed, 0x49, 0x9a, 0x37, 0xe1, 0x91, 0xb8,
	0xe4, 0x11, 0x50, 0xe1, 0x41, 0xb0, 0x3d, 0x1f, 0x99, 0x92, 0xb6, 0xe1, 0x22, 0xd2, 0xf8, 0xfc,
	0xff, 0xe7, 0x37, 0xc7, 0x8e, 0xed, 0x01, 0x1d, 0x49, 0x95, 0x88, 0x25, 0xa1, 0x41, 0x48, 0x15,
	0xe9, 0xcd, 0xa5, 0xd0, 0x02, 0x55, 0x47, 0x4c, 0xce, 0xf0, 0x8c, 0x72, 0x7d, 0xf8, 0xe5, 0x98,
	0xe9, 0x49, 0x3c, 0xec, 0x11, 0x31, 0x7b, 0x3b, 0x16, 0x63, 0xf1, 0xd6, 0x75, 0x0c, 0xe3, 0x91,
	0x1b, 0xb9, 0x81, 0x7b, 0x4a, 0x9c, 0x87, 0x5d, 0x22, 0x88, 0x08, 0x18, 0xd7, 0x54, 0x8e, 0xa8,
	0xa4, 0xdc, 0x70, 0x15, 0x11, 0xe6, 0x1d, 0x69, 0xfd, 0x20, 0x7f, 0xdd, 0x82, 0x12, 0x2d, 0x64,
	0x26, 0x2f, 0x27, 0x58, 0xd2, 0x60, 0x86, 0xe7, 0x81, 0xd2, 0x58, 0xa7, 0xdd, 0xc7, 0xf7, 0x75,
	0x80, 0xfc, 0xd4, 0x70, 0x66, 0xe2, 0x49, 0x36, 0x37, 0x1e, 0x84, 0x40, 0x25, 0x8e, 0x59, 0xe8,
	0x95, 0x8e, 0x4a, 0x6f, 0xaa, 0xbe, 0x7b, 0x46, 0x1f, 0x83, 0xc6, 0x48, 0x32, 0xca, 0xc3, 0x68,
	0x15, 0x70, 0x13, 0xdd, 0x7b, 0xe9, 0x8a, 0xf5, 0x4c, 0xbc, 0x36, 0x1a, 0xfa, 0x0c, 0xc0, 0x30,
	0xc5, 0xb0, 0x05, 0x4d, 0xfa, 0xca, 0xae, 0xaf, 0x55, 0xd0, 0x5d, 0xeb, 0x3b, 0xb0, 0x63, 0x93,
	0x50, 0xaf, 0x62, 0xea, 0xcd, 0x93, 0x2f, 0x7a, 0xf9, 0x92, 0xf4, 0x36, 0x13, 0xe5, 0xd2, 0xc0,
	0x5a, 0xfc, 0xc4, 0x69, 0x23, 0x69, 0xac, 0xa6, 0x01, 0xc1, 0x73, 0x4c, 0x98, 0x5e, 0x79, 0x3b,
	0x06, 0x55, 0xf1, 0xeb, 0x56, 0xec, 0xa7, 0x1a, 0xfa, 0x04, 0x34, 0x23, 0xac, 0x74, 0x30, 0xa1,
	0x58, 0xea, 0x21, 0xc5, 0xda, 0xdb, 0x75, 0x5d, 0x0d, 0xab, 0x9e, 0x67, 0x22, 0xfa, 0x06, 0x54,
	0xf4, 0x6a, 0x4e, 0xbd, 0x57, 0x2e, 0xcd, 0xe7, 0xff, 0x2f, 0xcd, 0x8d, 0x71, 0xf8, 0xce, 0x87,
	0x8e, 0x40, 0x4d, 0x91, 0x09, 0x0d, 0xe3, 0x08, 0x0f, 0x23, 0xea, 0xed, 0x19, 0xcc, 0x9e, 0x5f,
	0x94, 0xd0, 0x09, 0x38, 0x20, 0xb1, 0x34, 0x7f, 0x99, 0x0e, 0x64, 0xcc, 0x39, 0xe3, 0xe3, 0xc0,
	0x06, 0x55, 0x5e, 0xf5, 0xa8, 0x6c, 0xf2, 0x74, 0xd2, 0xa2, 0x9f, 0xd4, 0x6e, 0x6c, 0x09, 0x7d,
	0x0d, 0x5e, 0xf3, 0x78, 0xf6, 0xb0, 0x3f, 0x18, 0xd2, 0x48, 0x2c, 0x3d, 0xe0, 0x66, 0xb1, 0x6f,
	0xca, 0x45, 0xc7, 0xa9, 0xad, 0xa1, 0x4f, 0x41, 0xcb, 0xda, 0x54, 0x24, 0x74, 0xd6, 0x5e, 0x4b,
	0x26, 0x6d, 0xe4, 0x81, 0x55, 0x93, 0xbe, 0xef, 0x41, 0x07, 0x2f, 0x30, 0x73, 0xf9, 0x82, 0x6c,
	0xe3, 0x28, 0xaf, 0x6e, 0x7a, 0x6b, 0x27, 0xef, 0x3f, 0xb2, 0x06, 0x3f, 0xba, 0x3d, 0xe5, 0xa3,
	0xdc, 0x95, 0x15, 0x14, 0x3a, 0x07, 0xc8, 0x10, 0xa8, 0x5c, 0xd0, 0xb0, 0x80, 0x6a, 0x6c, 0x43,
	0xb5, 0x33, 0xd3, 0x9a, 0xf4, 0x2b, 0xf8, 0x70, 0xc6, 0x78, 0xf0, 0x48, 0xb2, 0x74, 0x2e, 0xcd,
	0x6d, 0xd0, 0x43, 0xe3, 0x7f, 0xb7, 0x11, 0x31, 0x99, 0xb3, 0xa5, 0xe3, 0xbb, 0x67, 0xe8, 0xad,
	0xed, 0x74, 0x7c, 0xf7, 0x14, 0xfd, 0x37, 0xd0, 0xb5, 0xd9, 0x63, 0xbe, 0xb9, 0x16, 0x29, 0x1e,
	0x6e, 0xc3, 0x7f, 0x60, 0x00, 0xb7, 0x7c, 0x63, 0x59, 0xd6, 0x7c, 0x93, 0xfe, 0x19, 0x7e, 0x7b,
	0x3b, 0x1f, 0xdf, 0x3d, 0xc9, 0xff, 0x0e, 0xb4, 0xf3, 0x0b, 0x24, 0x3f, 0x56, 0x68, 0x1b, 0x12,
	0x66, 0x9e, 0xfc, 0xd4, 0x7d, 0x0b, 0x5a, 0xff, 0xb9, 0x71, 0xbc, 0x8e, 0xa3, 0x78, 0x05, 0xca,
	0x4f, 0xb6, 0xe3, 0x0a, 0xcf, 0xed, 0xa1, 0x56, 0x7e, 0x63, 0x59, 0x1c, 0xa2, 0x5f, 0x80, 0xf7,
	0xd4, 0x55, 0xe7, 0xed, 0x3b, 0xd4, 0x47, 0x05, 0x54, 0x5f, 0xf4, 0xc5, 0x45, 0xa1, 0x73, 0xe0,
	0x1a, 0xfd, 0xf7, 0x2c, 0x62, 0x53, 0x47, 0x6f, 0x00, 0xd4, 0x12, 0x13, 0x1b, 0x8f, 0x4c, 0x18,
	0xa7, 0x81, 0xb9, 0xec, 0x0e, 0xdc, 0x09, 0x69, 0x3a, 0xfd, 0x2a, 0x91, 0x2f, 0xc2, 0xe3, 0x9f,
	0x41, 0xe3, 0xc1, 0xdd, 0x83, 0x3a, 0xa0, 0x95, 0x09, 0xb7, 0x7c, 0xca, 0xc5, 0x92, 0xc3, 0x17,
	0x08, 0x82, 0x7a, 0x26, 0x5e, 0x84, 0x11, 0x85, 0xa5, 0xa2, 0x72, 0x1a, 0xab, 0x15, 0x7c, 0x59,
	0x54, 0x2e, 0x85, 0xd2, 0xb0, 0x7c, 0xfc, 0x4f, 0x69, 0x2d, 0xd9, 0xab, 0x04, 0x35, 0x01, 0xc8,
	0xc6, 0x3f, 0xc4, 0x0f, 0xb1, 0x7d, 0x93, 0xdb, 0x60, 0xdb, 0xeb, 0x38, 0x7d, 0x93, 0x91, 0x1a,
	0x6e, 0x0b, 0xd4, 0x32, 0xe9, 0x9a, 0x11, 0x58, 0x2e, 0xba, 0xce, 0x98, 0x9a, 0xc2, 0x4a, 0xb1,
	0x65, 0xa0, 0x42, 0xb8, 0x53, 0x9c, 0x44, 0x3a, 0x55, 0xb8, 0x5b, 0x14, 0x2f, 0xc5, 0x98, 0x11,
	0x1c, 0xc1, 0x57, 0x68, 0x1f, 0xc0, 0x9c, 0x1e, 0xcf, 0xf0, 0xb5, 0x08, 0x29, 0xdc, 0x33, 0x1f,
	0x88, 0x66, 0x0e, 0x14, 0x64, 0x4a, 0x35, 0xac, 0xa2, 0xd7, 0xa0, 0xb3, 0x0e, 0x2b, 0x64, 0xc8,
	0x38, 0x36, 0x7b, 0x03, 0x82, 0x53, 0xf8, 0xc7, 0x7d, 0xb7, 0xf4, 0xa7, 0xf9, 0xfd, 0x65, 0x7e,
	0xbf, 0xff, 0xdd, 0x7d, 0x31, 0xdc, 0x75, 0x5f, 0x9f, 0xaf, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xce, 0xf4, 0xc6, 0xb9, 0x1c, 0x07, 0x00, 0x00,
}
