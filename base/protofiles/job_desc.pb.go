// Code generated by protoc-gen-gogo.
// source: job_desc.proto
// DO NOT EDIT!

package firmament

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JobDescriptor_JobState int32

const (
	JobDescriptor_New       JobDescriptor_JobState = 0
	JobDescriptor_Created   JobDescriptor_JobState = 1
	JobDescriptor_Running   JobDescriptor_JobState = 2
	JobDescriptor_Completed JobDescriptor_JobState = 3
	JobDescriptor_Failed    JobDescriptor_JobState = 4
	JobDescriptor_Aborted   JobDescriptor_JobState = 5
	JobDescriptor_Unknown   JobDescriptor_JobState = 6
)

var JobDescriptor_JobState_name = map[int32]string{
	0: "New",
	1: "Created",
	2: "Running",
	3: "Completed",
	4: "Failed",
	5: "Aborted",
	6: "Unknown",
}
var JobDescriptor_JobState_value = map[string]int32{
	"New":       0,
	"Created":   1,
	"Running":   2,
	"Completed": 3,
	"Failed":    4,
	"Aborted":   5,
	"Unknown":   6,
}

func (x JobDescriptor_JobState) String() string {
	return proto.EnumName(JobDescriptor_JobState_name, int32(x))
}
func (JobDescriptor_JobState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorJobDesc, []int{0, 0}
}

type JobDescriptor struct {
	Uuid      string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State     JobDescriptor_JobState `protobuf:"varint,3,opt,name=state,proto3,enum=firmament.JobDescriptor_JobState" json:"state,omitempty"`
	RootTask  *TaskDescriptor        `protobuf:"bytes,4,opt,name=root_task,json=rootTask" json:"root_task,omitempty"`
	OutputIds [][]byte               `protobuf:"bytes,5,rep,name=output_ids,json=outputIds" json:"output_ids,omitempty"`
}

func (m *JobDescriptor) Reset()                    { *m = JobDescriptor{} }
func (m *JobDescriptor) String() string            { return proto.CompactTextString(m) }
func (*JobDescriptor) ProtoMessage()               {}
func (*JobDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorJobDesc, []int{0} }

func (m *JobDescriptor) GetRootTask() *TaskDescriptor {
	if m != nil {
		return m.RootTask
	}
	return nil
}

func init() {
	proto.RegisterType((*JobDescriptor)(nil), "firmament.JobDescriptor")
	proto.RegisterEnum("firmament.JobDescriptor_JobState", JobDescriptor_JobState_name, JobDescriptor_JobState_value)
}
func (m *JobDescriptor) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *JobDescriptor) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintJobDesc(data, i, uint64(len(m.Uuid)))
		i += copy(data[i:], m.Uuid)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintJobDesc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.State != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintJobDesc(data, i, uint64(m.State))
	}
	if m.RootTask != nil {
		data[i] = 0x22
		i++
		i = encodeVarintJobDesc(data, i, uint64(m.RootTask.Size()))
		n1, err := m.RootTask.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.OutputIds) > 0 {
		for _, b := range m.OutputIds {
			data[i] = 0x2a
			i++
			i = encodeVarintJobDesc(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	return i, nil
}

func encodeFixed64JobDesc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32JobDesc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintJobDesc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *JobDescriptor) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovJobDesc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovJobDesc(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovJobDesc(uint64(m.State))
	}
	if m.RootTask != nil {
		l = m.RootTask.Size()
		n += 1 + l + sovJobDesc(uint64(l))
	}
	if len(m.OutputIds) > 0 {
		for _, b := range m.OutputIds {
			l = len(b)
			n += 1 + l + sovJobDesc(uint64(l))
		}
	}
	return n
}

func sovJobDesc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozJobDesc(x uint64) (n int) {
	return sovJobDesc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JobDescriptor) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJobDesc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.State |= (JobDescriptor_JobState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJobDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootTask == nil {
				m.RootTask = &TaskDescriptor{}
			}
			if err := m.RootTask.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJobDesc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputIds = append(m.OutputIds, make([]byte, postIndex-iNdEx))
			copy(m.OutputIds[len(m.OutputIds)-1], data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJobDesc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJobDesc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJobDesc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJobDesc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJobDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJobDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthJobDesc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowJobDesc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipJobDesc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthJobDesc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJobDesc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorJobDesc = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x9b, 0xa6, 0xff, 0x72, 0xfb, 0xb5, 0x5f, 0xe4, 0x29, 0x54, 0xa2, 0x2a, 0x9d, 0xba,
	0x90, 0x4a, 0x45, 0x82, 0x19, 0x8a, 0x90, 0x60, 0x60, 0x08, 0x30, 0x47, 0x71, 0x93, 0x06, 0xd3,
	0xc6, 0x37, 0x72, 0x6c, 0xf5, 0x55, 0x78, 0x07, 0x5e, 0x84, 0x91, 0x47, 0x40, 0xf0, 0x22, 0xd8,
	0x8e, 0x80, 0x32, 0x58, 0x3a, 0xe7, 0xe7, 0x73, 0x7c, 0xaf, 0x0c, 0xc3, 0x27, 0xa4, 0x71, 0x9a,
	0x55, 0xab, 0xb0, 0x14, 0x28, 0x91, 0x78, 0x6b, 0x26, 0x8a, 0xa4, 0xc8, 0xb8, 0x1c, 0x1d, 0xe7,
	0x4c, 0x3e, 0x2a, 0x1a, 0xae, 0xb0, 0x98, 0xe7, 0x98, 0xe3, 0xdc, 0x26, 0xa8, 0x5a, 0x5b, 0x67,
	0x8d, 0x55, 0x75, 0x73, 0xf4, 0x5f, 0x26, 0xd5, 0x66, 0xef, 0xa9, 0xe9, 0x4b, 0x13, 0x06, 0x37,
	0x48, 0x2f, 0x35, 0x11, 0xac, 0x94, 0x28, 0x08, 0x81, 0x96, 0x52, 0x2c, 0x0d, 0x9c, 0x89, 0x33,
	0xf3, 0x22, 0xab, 0x0d, 0xe3, 0x7a, 0x5e, 0xd0, 0xac, 0x99, 0xd1, 0xe4, 0x0c, 0xda, 0x95, 0x4c,
	0x64, 0x16, 0xb8, 0x1a, 0x0e, 0x17, 0x47, 0xe1, 0xcf, 0x52, 0xe1, 0x9f, 0x07, 0x8d, 0xbb, 0x33,
	0xc1, 0xa8, 0xce, 0x93, 0x53, 0xf0, 0x04, 0xa2, 0x8c, 0xcd, 0x2a, 0x41, 0x4b, 0x97, 0xfb, 0x8b,
	0x83, 0xbd, 0xf2, 0xbd, 0xc6, 0xbf, 0xed, 0xa8, 0x67, 0xb2, 0x86, 0x91, 0x43, 0x00, 0x54, 0xb2,
	0x54, 0x32, 0x66, 0x69, 0x15, 0xb4, 0x27, 0xee, 0xec, 0x5f, 0xe4, 0xd5, 0xe4, 0x3a, 0xad, 0xa6,
	0x14, 0x7a, 0xdf, 0x93, 0x48, 0x17, 0xdc, 0xdb, 0x6c, 0xe7, 0x37, 0x48, 0x1f, 0xba, 0x4b, 0x91,
	0x69, 0x94, 0xfa, 0x8e, 0x31, 0x91, 0xe2, 0x9c, 0xf1, 0xdc, 0x6f, 0x92, 0x01, 0x78, 0x4b, 0x2c,
	0xca, 0x6d, 0x66, 0xee, 0x5c, 0x02, 0xd0, 0xb9, 0x4a, 0xd8, 0x56, 0xeb, 0x96, 0xc9, 0x9d, 0x53,
	0x14, 0xe6, 0xa2, 0x6d, 0xcc, 0x03, 0xdf, 0x70, 0xdc, 0x71, 0xbf, 0x73, 0xe1, 0xbf, 0x7e, 0x8c,
	0x9d, 0x37, 0x7d, 0xde, 0xf5, 0x79, 0xfe, 0x1c, 0x37, 0x68, 0xc7, 0x7e, 0xe3, 0xc9, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xda, 0x1b, 0xfd, 0x40, 0xa3, 0x01, 0x00, 0x00,
}
